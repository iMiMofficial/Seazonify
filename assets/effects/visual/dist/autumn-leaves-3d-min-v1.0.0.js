const autumnLeaves3DEffect={name:"Autumn Leaves 3D",description:"Stunning 3D autumn leaves floating with realistic physics, wind effects, and immersive perspective depth creating a magical autumn atmosphere",icon:"üçÇ",type:"visual",author:"Seazonify",thumbnail:"https://cdn.jsdelivr.net/gh/iMiMofficial/Seazonify@main/assets/effects/visual/thumbnails/autumn-leaves-3d.webp",version:"1.0.0",created:"2025-10-07",category:"seasonal",tags:["autumn","leaves","3d","maple","oak","birch"],css:"\n      .szfy-autumn-leaves-3d {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        z-index: 9999;\n        overflow: hidden;\n        perspective: 800px;\n        background: linear-gradient(180deg, \n          rgba(135, 206, 235, 0.05) 0%, \n          rgba(255, 140, 0, 0.02) 50%, \n          rgba(139, 69, 19, 0.03) 100%);\n      }\n      \n      .szfy-leaf-3d {\n        position: absolute;\n        background-size: 100% 100%;\n        background-repeat: no-repeat;\n        filter: drop-shadow(0 2px 6px rgba(0, 0, 0, 0.4));\n        transform-style: preserve-3d;\n        opacity: 0.9;\n      }\n      \n      .szfy-leaf-3d.maple {\n        width: 28px;\n        height: 28px;\n        background-image: url('https://cdn.jsdelivr.net/gh/iMiMofficial/Seazonify@main/assets/effects/visual/assets/img/maple-leaf.webp');\n      }\n      \n      .szfy-leaf-3d.oak {\n        width: 20px;\n        height: 20px;\n        background-image: url('https://cdn.jsdelivr.net/gh/iMiMofficial/Seazonify@main/assets/effects/visual/assets/img/oak-leaf.webp');\n      }\n      \n      .szfy-leaf-3d.birch {\n        width: 20px;\n        height: 20px;\n        background-image: url('https://cdn.jsdelivr.net/gh/iMiMofficial/Seazonify@main/assets/effects/visual/assets/img/birch-leaf.webp');\n      }\n    ",html:'\n      <div class="szfy-autumn-leaves-3d" id="szfy-autumn-leaves-3d-container">\n        \x3c!-- 3D autumn leaves will be dynamically created here --\x3e\n      </div>\n    ',js:"\n      (function() {\n        const container = document.getElementById('szfy-autumn-leaves-3d-container');\n        if (!container) return;\n        \n        // Configuration\n        const maxLeaves = 35;\n        const leaves = [];\n        let animationId = null;\n        \n        // Leaf types with realistic properties\n        const leafTypes = ['maple', 'oak', 'birch'];\n        \n        // Utility function for random values\n        function random(min, max) {\n          return min + Math.random() * (max - min);\n        }\n        \n        // Enhanced leaf class with 3D physics\n        class Leaf3D {\n          constructor() {\n            this.element = null;\n            this.type = leafTypes[Math.floor(Math.random() * leafTypes.length)];\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotationX = 0;\n            this.rotationY = 0;\n            this.rotationZ = 0;\n            this.scale = 1;\n            this.velocityX = 0;\n            this.velocityY = 0;\n            this.velocityZ = 0;\n            this.rotationSpeedX = 0;\n            this.rotationSpeedY = 0;\n            this.rotationSpeedZ = 0;\n            this.life = 1.0;\n            this.age = 0;\n            this.windTimer = 0;\n            this.init();\n          }\n          \n          init() {\n            // Create leaf element\n            this.element = document.createElement('div');\n            this.element.className = 'szfy-leaf-3d ' + this.type;\n            \n            // Random starting position\n            this.x = random(0, window.innerWidth);\n            this.y = random(-200, -100);\n            this.z = random(-200, 200);\n            \n            // Random properties\n            this.scale = random(0.6, 1.2);\n            this.velocityX = random(-0.3, 0.3);\n            this.velocityY = random(0.5, 1.2);\n            this.velocityZ = random(-0.1, 0.1);\n            \n            // Rotation speeds\n            this.rotationSpeedX = random(-2, 2);\n            this.rotationSpeedY = random(-2, 2);\n            this.rotationSpeedZ = random(-1, 1);\n            \n            // Apply initial transform\n            this.updateTransform();\n            \n            // Add to container\n            container.appendChild(this.element);\n          }\n          \n          updateTransform() {\n            const transform = `translate3d(${this.x}px, ${this.y}px, ${this.z}px) rotateX(${this.rotationX}deg) rotateY(${this.rotationY}deg) rotateZ(${this.rotationZ}deg) scale(${this.scale})`;\n            this.element.style.transform = transform;\n          }\n          \n          update(deltaTime) {\n            this.age += deltaTime;\n            this.windTimer += deltaTime;\n            \n            // Wind effect - changes over time\n            const windStrength = Math.sin(this.windTimer * 0.001) * 0.5 + Math.sin(this.windTimer * 0.003) * 0.3;\n            const windDirection = Math.sin(this.windTimer * 0.002) * 0.4;\n            \n            // Apply wind to horizontal movement\n            this.velocityX += windStrength * 0.0005;\n            this.velocityY += windDirection * 0.0002;\n            \n            // Gravity effect\n            this.velocityY += 0.0008;\n            \n            // Air resistance\n            this.velocityX *= 0.998;\n            this.velocityY *= 0.999;\n            this.velocityZ *= 0.995;\n            \n            // Random turbulence\n            if (Math.random() < 0.01) {\n              this.velocityX += random(-0.2, 0.2);\n              this.velocityY += random(-0.1, 0.1);\n            }\n            \n            // Update position\n            this.x += this.velocityX * deltaTime * 0.1;\n            this.y += this.velocityY * deltaTime * 0.1;\n            this.z += this.velocityZ * deltaTime * 0.1;\n            \n            // Update rotation\n            this.rotationX += this.rotationSpeedX * deltaTime * 0.05;\n            this.rotationY += this.rotationSpeedY * deltaTime * 0.05;\n            this.rotationZ += this.rotationSpeedZ * deltaTime * 0.05;\n            \n            // Add wind-based rotation\n            this.rotationZ += windStrength * 0.1;\n            \n            // Scale variation for depth effect\n            this.scale = 1 + (this.z / 1000);\n            \n            // Life decay\n            this.life -= deltaTime * 0.00008;\n            this.element.style.opacity = Math.max(0, this.life);\n            \n            // Update transform\n            this.updateTransform();\n            \n            // Check if leaf should be removed\n            if (this.y > window.innerHeight + 100 || this.life <= 0 || \n                this.x < -100 || this.x > window.innerWidth + 100 ||\n                this.z < -500 || this.z > 500) {\n              this.destroy();\n              return false;\n            }\n            \n            return true;\n          }\n          \n          destroy() {\n            if (this.element && this.element.parentNode) {\n              this.element.parentNode.removeChild(this.element);\n            }\n          }\n        }\n        \n        // Create new leaves\n        function createLeaf() {\n          if (leaves.length < maxLeaves) {\n            leaves.push(new Leaf3D());\n          }\n        }\n        \n        // Animation loop\n        function animate(currentTime) {\n          const deltaTime = currentTime - (lastTime || currentTime);\n          lastTime = currentTime;\n          \n          // Update all leaves\n          for (let i = leaves.length - 1; i >= 0; i--) {\n            if (!leaves[i].update(deltaTime)) {\n              leaves.splice(i, 1);\n            }\n          }\n          \n          // Create new leaves occasionally\n          if (Math.random() < 0.015 && leaves.length < maxLeaves) {\n            createLeaf();\n          }\n          \n          animationId = requestAnimationFrame(animate);\n        }\n        \n        // Handle window resize\n        function handleResize() {\n          // Remove leaves that are now off-screen\n          for (let i = leaves.length - 1; i >= 0; i--) {\n            const leaf = leaves[i];\n            if (leaf.x < -100 || leaf.x > window.innerWidth + 100) {\n              leaf.destroy();\n              leaves.splice(i, 1);\n            }\n          }\n        }\n        \n        // Handle visibility change\n        function handleVisibilityChange() {\n          if (document.hidden) {\n            if (animationId) {\n              cancelAnimationFrame(animationId);\n              animationId = null;\n            }\n          } else {\n            if (!animationId) {\n              animationId = requestAnimationFrame(animate);\n            }\n          }\n        }\n        \n        // Initialize\n        let lastTime = 0;\n        \n        // Create initial leaves\n        for (let i = 0; i < Math.min(12, maxLeaves); i++) {\n          setTimeout(() => createLeaf(), i * 150);\n        }\n        \n        animationId = requestAnimationFrame(animate);\n        \n        // Event listeners\n        window.addEventListener('resize', handleResize);\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        \n        // Cleanup function\n        window.szfyAutumnLeaves3DCleanup = function() {\n          if (animationId) {\n            cancelAnimationFrame(animationId);\n          }\n          \n          leaves.forEach(leaf => {\n            leaf.destroy();\n          });\n          \n          leaves.length = 0;\n          \n          if (container) {\n            container.innerHTML = '';\n          }\n          \n          window.removeEventListener('resize', handleResize);\n          document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n      })();\n    "};"undefined"!=typeof window&&window.SeazonifyController&&window.SeazonifyController.injectVisualEffect(autumnLeaves3DEffect),"undefined"!=typeof module&&module.exports&&(module.exports=autumnLeaves3DEffect);
