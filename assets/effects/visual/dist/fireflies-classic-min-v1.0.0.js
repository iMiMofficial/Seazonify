const firefliesEffect={name:"Fireflies Classic",description:"Classic magical fireflies with enhanced soft glowing particles, natural flight patterns, and realistic flickering that creates an enchanting night atmosphere",icon:"âœ¨",type:"visual",author:"Seazonify",thumbnail:"https://cdn.jsdelivr.net/gh/iMiMofficial/Seazonify@main/assets/effects/visual/thumbnails/fireflies-classic.webp",version:"1.0.0",created:"2025-10-07",updated:"2025-10-07",category:"nature",tags:["fireflies","classic","glow","particles","magical","atmospheric","soft","flicker","drift","enchanting","night","natural","enhanced"],css:"\n      .szfy-fireflies {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n        z-index: 9999;\n        overflow: hidden;\n      }\n      \n      .szfy-firefly {\n        position: absolute;\n        border-radius: 50%;\n        pointer-events: none;\n        animation: szfy-firefly-drift linear infinite;\n      }\n      \n      .szfy-firefly::before {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 120%;\n        height: 120%;\n        border-radius: 50%;\n        background: radial-gradient(circle, \n          rgba(255, 255, 180, 1) 0%, \n          rgba(255, 255, 140, 0.8) 25%, \n          rgba(255, 255, 100, 0.6) 50%, \n          rgba(255, 255, 60, 0.4) 75%, \n          rgba(255, 255, 20, 0.2) 90%,\n          transparent 100%);\n        transform: translate(-50%, -50%);\n        animation: szfy-firefly-glow 2.5s ease-in-out infinite;\n        filter: blur(0.5px);\n      }\n      \n      .szfy-firefly::after {\n        content: '';\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        width: 300%;\n        height: 300%;\n        border-radius: 50%;\n        background: radial-gradient(circle, \n          rgba(255, 255, 180, 0.15) 0%, \n          rgba(255, 255, 140, 0.08) 30%, \n          rgba(255, 255, 100, 0.04) 60%, \n          transparent 100%);\n        transform: translate(-50%, -50%);\n        animation: szfy-firefly-aura 3.5s ease-in-out infinite;\n        filter: blur(1px);\n      }\n      \n      .szfy-firefly.small {\n        width: 3px;\n        height: 3px;\n      }\n      \n      .szfy-firefly.medium {\n        width: 4px;\n        height: 4px;\n      }\n      \n      .szfy-firefly.large {\n        width: 6px;\n        height: 6px;\n      }\n      \n      @keyframes szfy-firefly-drift {\n        0% {\n          transform: translateY(100vh) translateX(0px) rotate(0deg);\n          opacity: 0;\n        }\n        8% {\n          opacity: 0.7;\n        }\n        15% {\n          opacity: 1;\n          transform: translateY(90vh) translateX(15px) rotate(2deg);\n        }\n        30% {\n          transform: translateY(70vh) translateX(-10px) rotate(-1deg);\n        }\n        50% {\n          transform: translateY(50vh) translateX(20px) rotate(1deg);\n        }\n        70% {\n          transform: translateY(30vh) translateX(-15px) rotate(-0.5deg);\n        }\n        85% {\n          opacity: 1;\n        }\n        100% {\n          transform: translateY(-100px) translateX(30px) rotate(0deg);\n          opacity: 0;\n        }\n      }\n      \n      @keyframes szfy-firefly-glow {\n        0%, 100% {\n          opacity: 0.4;\n          transform: translate(-50%, -50%) scale(1);\n          filter: brightness(0.8);\n        }\n        15% {\n          opacity: 0.9;\n          transform: translate(-50%, -50%) scale(1.15);\n          filter: brightness(1.1);\n        }\n        30% {\n          opacity: 0.6;\n          transform: translate(-50%, -50%) scale(1.05);\n          filter: brightness(0.9);\n        }\n        45% {\n          opacity: 1;\n          transform: translate(-50%, -50%) scale(1.25);\n          filter: brightness(1.2);\n        }\n        60% {\n          opacity: 0.7;\n          transform: translate(-50%, -50%) scale(1.1);\n          filter: brightness(1.0);\n        }\n        75% {\n          opacity: 0.8;\n          transform: translate(-50%, -50%) scale(1.2);\n          filter: brightness(1.05);\n        }\n        90% {\n          opacity: 0.5;\n          transform: translate(-50%, -50%) scale(1.05);\n          filter: brightness(0.85);\n        }\n      }\n      \n      @keyframes szfy-firefly-aura {\n        0%, 100% {\n          opacity: 0.05;\n          transform: translate(-50%, -50%) scale(1);\n        }\n        50% {\n          opacity: 0.15;\n          transform: translate(-50%, -50%) scale(1.3);\n        }\n      }\n      \n      @keyframes szfy-firefly-flicker {\n        0%, 100% {\n          opacity: 1;\n        }\n        20% {\n          opacity: 0.3;\n        }\n        40% {\n          opacity: 0.8;\n        }\n        60% {\n          opacity: 0.4;\n        }\n        80% {\n          opacity: 0.9;\n        }\n      }\n    ",html:'\n      <div class="szfy-fireflies" id="szfy-fireflies-container">\n        \x3c!-- Fireflies will be dynamically created here --\x3e\n      </div>\n    ',js:"\n      (function() {\n        const container = document.getElementById('szfy-fireflies-container');\n        if (!container) return;\n        \n        // Configuration\n        const maxFireflies = 40;\n        const fireflies = [];\n        let animationId = null;\n        let mouseX = window.innerWidth / 2;\n        let mouseY = window.innerHeight / 2;\n        let lastMouseMove = 0;\n        \n        // Firefly class\n        class Firefly {\n          constructor() {\n            this.element = null;\n            this.x = 0;\n            this.y = 0;\n            this.vx = 0;\n            this.vy = 0;\n            this.size = 'medium';\n            this.flickerTimer = 0;\n            this.flickerInterval = 0;\n            this.driftSpeed = 0;\n            this.driftDirection = 0;\n            this.opacity = 1;\n            this.brightness = 1;\n            this.attractionStrength = Math.random() * 0.3 + 0.1;\n            this.flightPath = [];\n            this.pathIndex = 0;\n            this.init();\n          }\n          \n          init() {\n            // Create firefly element\n            this.element = document.createElement('div');\n            this.element.className = 'szfy-firefly';\n            \n            // Random size\n            const sizes = ['small', 'medium', 'large'];\n            this.size = sizes[Math.floor(Math.random() * sizes.length)];\n            this.element.classList.add(this.size);\n            \n            // Random starting position\n            this.x = Math.random() * window.innerWidth;\n            this.y = window.innerHeight + Math.random() * 100;\n            \n            // Random drift movement with more natural patterns\n            this.driftSpeed = Math.random() * 0.4 + 0.2; // Slower, more graceful drift\n            this.driftDirection = (Math.random() - 0.5) * 0.6; // More subtle horizontal drift\n            \n            // Generate natural flight path\n            this.generateFlightPath();\n            \n            // Random flicker pattern - more realistic timing\n            this.flickerInterval = Math.random() * 1500 + 800; // 0.8-2.3 seconds\n            this.flickerTimer = Math.random() * this.flickerInterval;\n            \n            // Apply initial position\n            this.updatePosition();\n            \n            // Add to container\n            container.appendChild(this.element);\n          }\n          \n          generateFlightPath() {\n            // Create a more natural curved flight path\n            const pathPoints = 8;\n            const startX = this.x;\n            const startY = this.y;\n            const endX = startX + (Math.random() - 0.5) * 200;\n            const endY = -100;\n            \n            this.flightPath = [];\n            for (let i = 0; i <= pathPoints; i++) {\n              const t = i / pathPoints;\n              const curveX = startX + (endX - startX) * t + Math.sin(t * Math.PI) * (Math.random() - 0.5) * 50;\n              const curveY = startY + (endY - startY) * t + Math.cos(t * Math.PI * 2) * (Math.random() - 0.5) * 30;\n              this.flightPath.push({ x: curveX, y: curveY });\n            }\n          }\n          \n          updatePosition() {\n            this.element.style.left = this.x + 'px';\n            this.element.style.top = this.y + 'px';\n          }\n          \n          update(deltaTime) {\n            // Follow flight path for more natural movement\n            if (this.flightPath.length > 0 && this.pathIndex < this.flightPath.length) {\n              const targetPoint = this.flightPath[this.pathIndex];\n              const dx = targetPoint.x - this.x;\n              const dy = targetPoint.y - this.y;\n              const distance = Math.sqrt(dx * dx + dy * dy);\n              \n              if (distance > 5) {\n                const moveSpeed = this.driftSpeed * deltaTime * 0.08;\n                this.x += (dx / distance) * moveSpeed;\n                this.y += (dy / distance) * moveSpeed;\n              } else {\n                this.pathIndex++;\n              }\n            }\n            \n            // Subtle mouse attraction (only if mouse has moved recently)\n            const timeSinceMouseMove = Date.now() - lastMouseMove;\n            if (timeSinceMouseMove < 2000) { // Within 2 seconds\n              const mouseDx = mouseX - this.x;\n              const mouseDy = mouseY - this.y;\n              const mouseDistance = Math.sqrt(mouseDx * mouseDx + mouseDy * mouseDy);\n              \n              if (mouseDistance < 150 && mouseDistance > 20) {\n                const attraction = this.attractionStrength * deltaTime * 0.01;\n                this.x += (mouseDx / mouseDistance) * attraction;\n                this.y += (mouseDy / mouseDistance) * attraction;\n              }\n            }\n            \n            // Enhanced flicker with more realistic patterns\n            this.flickerTimer += deltaTime;\n            if (this.flickerTimer >= this.flickerInterval) {\n              this.flickerTimer = 0;\n              this.flickerInterval = Math.random() * 1500 + 800; // New random interval\n              this.element.style.animation = 'szfy-firefly-flicker 0.4s ease-in-out';\n              setTimeout(() => {\n                this.element.style.animation = '';\n              }, 400);\n            }\n            \n            // Update position\n            this.updatePosition();\n            \n            // Check if firefly is off screen\n            if (this.y < -100 || this.pathIndex >= this.flightPath.length) {\n              this.reset();\n            }\n          }\n          \n          reset() {\n            // Reset to bottom of screen with new flight path\n            this.y = window.innerHeight + Math.random() * 100;\n            this.x = Math.random() * window.innerWidth;\n            this.driftDirection = (Math.random() - 0.5) * 0.6;\n            this.flickerInterval = Math.random() * 1500 + 800;\n            this.flickerTimer = Math.random() * this.flickerInterval;\n            this.pathIndex = 0;\n            this.generateFlightPath();\n            this.updatePosition();\n          }\n          \n          destroy() {\n            if (this.element && this.element.parentNode) {\n              this.element.parentNode.removeChild(this.element);\n            }\n          }\n        }\n        \n        // Create initial fireflies\n        function createFireflies() {\n          for (let i = 0; i < maxFireflies; i++) {\n            setTimeout(() => {\n              fireflies.push(new Firefly());\n            }, i * 200); // Stagger creation\n          }\n        }\n        \n        // Animation loop\n        function animate(currentTime) {\n          const deltaTime = currentTime - (lastTime || currentTime);\n          lastTime = currentTime;\n          \n          // Update all fireflies\n          fireflies.forEach(firefly => {\n            firefly.update(deltaTime);\n          });\n          \n          animationId = requestAnimationFrame(animate);\n        }\n        \n        // Handle window resize\n        function handleResize() {\n          fireflies.forEach(firefly => {\n            firefly.updatePosition();\n          });\n        }\n        \n        // Handle visibility change\n        function handleVisibilityChange() {\n          if (document.hidden) {\n            if (animationId) {\n              cancelAnimationFrame(animationId);\n              animationId = null;\n            }\n          } else {\n            if (!animationId) {\n              animationId = requestAnimationFrame(animate);\n            }\n          }\n        }\n        \n        // Initialize\n        let lastTime = 0;\n        createFireflies();\n        animationId = requestAnimationFrame(animate);\n        \n        // Mouse tracking for subtle attraction effect\n        function handleMouseMove(event) {\n          mouseX = event.clientX;\n          mouseY = event.clientY;\n          lastMouseMove = Date.now();\n        }\n        \n        // Event listeners\n        window.addEventListener('resize', handleResize);\n        window.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        \n        // Cleanup function\n        window.szfyFirefliesCleanup = function() {\n          if (animationId) {\n            cancelAnimationFrame(animationId);\n          }\n          \n          fireflies.forEach(firefly => {\n            firefly.destroy();\n          });\n          \n          fireflies.length = 0;\n          \n          if (container) {\n            container.innerHTML = '';\n          }\n          \n          window.removeEventListener('resize', handleResize);\n          window.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('visibilitychange', handleVisibilityChange);\n        };\n      })();\n    "};"undefined"!=typeof window&&window.SeazonifyController&&window.SeazonifyController.injectVisualEffect(firefliesEffect),"undefined"!=typeof module&&module.exports&&(module.exports={visual:firefliesEffect});
